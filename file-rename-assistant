import os
import tkinter as tk
from tkinter import messagebox, simpledialog
from tkinter.ttk import Treeview, Scrollbar
from tkinterdnd2 import TkinterDnD, DND_FILES
from openai import OpenAI
import threading

class FileRenameAssistant(TkinterDnD.Tk):
    def __init__(self):
        super().__init__()
        self.title("文件重命名助手v1.0")
        self.geometry("600x400")

        # Ollama 客户端配置
        self.client = OpenAI(
            base_url='http://localhost:11434/v1',
            api_key='ollama'
        )

        # 文件列表
        self.file_list_frame = tk.Frame(self)
        self.file_list_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        # 创建树形视图
        self.tree = Treeview(self.file_list_frame, columns=('Filename', 'Path'), show='headings')
        self.tree.heading('Filename', text='文件名')
        self.tree.heading('Path', text='路径')
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # 滚动条
        scrollbar = Scrollbar(self.file_list_frame, orient=tk.VERTICAL, command=self.tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscroll=scrollbar.set)

        # 重命名按钮
        self.rename_button = tk.Button(self, text="获取重命名建议", command=self.get_rename_suggestions)
        self.rename_button.pack(pady=10)

        # 拖放支持
        self.drop_target_register(DND_FILES)
        self.dnd_bind('<<Drop>>', self.drop_files)

    def drop_files(self, event):
        # 处理拖放文件
        files = event.data.split()
        for file in files:
            # 处理文件路径中的空格和引号
            file = file.strip('{}')
            if os.path.isfile(file):
                # 检查文件是否已经存在于列表中
                existing_items = self.tree.get_children()
                if not any(self.tree.item(item)['values'][1] == file for item in existing_items):
                    filename = os.path.basename(file)
                    self.tree.insert('', 'end', values=(filename, file))

    def get_rename_suggestions(self):
        # 获取选中的文件
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("警告", "请先选择要重命名的文件")
            return

        # 禁用按钮防止重复点击
        self.rename_button.config(state=tk.DISABLED)

        # 启动线程以防止 UI 冻结
        threading.Thread(target=self.process_rename_suggestions, daemon=True).start()

    def process_rename_suggestions(self):
        try:
            selected_items = self.tree.selection()
            selected_file_path = self.tree.item(selected_items[0])['values'][1]

            # 读取文件内容
            with open(selected_file_path, 'r', encoding='utf-8') as file:
                file_content = file.read(1000)  # 限制读取长度以避免过大文件

            # 构建 prompt
            messages = [
                {"role": "system", "content": "你是一个文件命名助手。根据文件内容，提供一个简洁、清晰、有意义的文件名。"},
                {"role": "user", "content": f"以下是文件内容：\n{file_content}\n请为这个文件提供一个合适的名字。"}
            ]

            # 调用 Ollama API
            response = self.client.chat.completions.create(
                model="llama3.2",
                messages=messages
            )

            # 获取 API 响应
            suggestion = response.choices[0].message.content

            # 在主线程中更新 UI
            self.after(0, self.show_rename_dialog, suggestion, selected_items[0])

        except Exception as e:
            self.after(0, lambda: messagebox.showerror("错误", str(e)))
        finally:
            # 重新启用按钮
            self.after(0, lambda: self.rename_button.config(state=tk.NORMAL))

    def show_rename_dialog(self, suggestion, selected_item):
        # 提取可能的文件名
        import re
        filename_matches = re.findall(r'"([^"]*)"', suggestion)
        
        if not filename_matches:
            filename_matches = re.findall(r'([^\s]+\.\w+)', suggestion)
        
        if not filename_matches:
            filename_matches = [suggestion.split()[0]]

        # 创建选择对话框
        rename_dialog = tk.Toplevel(self)
        rename_dialog.title("选择文件名")
        rename_dialog.geometry("300x400")

        # 文件名列表
        listbox = tk.Listbox(rename_dialog, selectmode=tk.SINGLE)
        for filename in filename_matches:
            listbox.insert(tk.END, filename)
        listbox.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        def confirm_rename():
            selected = listbox.curselection()
            if selected:
                new_filename = listbox.get(selected[0])
                file_path = self.tree.item(selected_item)['values'][1]
                directory = os.path.dirname(file_path)
                new_path = os.path.join(directory, new_filename)

                try:
                    os.rename(file_path, new_path)
                    # 更新树形视图
                    self.tree.item(selected_item, values=(new_filename, new_path))
                    rename_dialog.destroy()
                except Exception as e:
                    messagebox.showerror("重命名错误", str(e))
            else:
                messagebox.showwarning("警告", "请选择一个文件名")

        # 确认按钮
        confirm_button = tk.Button(rename_dialog, text="确认重命名", command=confirm_rename)
        confirm_button.pack(pady=10)

def main():
    app = FileRenameAssistant()
    app.mainloop()

if __name__ == "__main__":
    main()
